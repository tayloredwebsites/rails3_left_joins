<h1>Problems with Rails 3 Active Record Query Interface in Has Many Through</h1>

<p>I have been having a problem with the Rails 3 Active Record Query Interface, and I have not been able to find any helpful posts on it.  I am posting this, assuming that my problem is real, and that a solution has not been posted anywhere.</p>
<p>I decided to create this separate project to avoid any other complications.</p>
<p>I decided to post the code to github for others to review, and to post the website to heroku for others to seeing how it runs.</p>
<p>I have been using PostgreSQL and sqlite3, and both have given me problems, with some slight variations in the actual results.</p>

<h2>Introduction to Database Model</h2>
<h3>Lookup Items for a Main Item</h3>
<p>First this application will have lookup items, in this case there are three.</p>


<h3>Lookups table Listing</h3>

<table border="1">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Value</th>
  </tr>

<% @lookups.each do |lookup| %>
  <tr>
    <td><%= lookup.id %></td>
    <td><%= lookup.name %></td>
    <td><%= lookup.value %></td>
  </tr>
<% end %>
</table>

<br />

<!-- %= link_to 'New Lookup', new_lookup_path % -->
<p>We are also going to have a number of Main Items (through_references table) should be able to have any combination of lookup items, and to conveniently be able to click the relevant lookup items say through check boxes.</p>
<p>If we want to have a listing if all the lookup items, and the Main Items that correspond with them, we can LEFT JOIN the 'lookups' table with the Main Items (through_references) table.</p>
<p>This situation is a has_many :through database model (I am avoiding HABTM as is often recommended).  In this case we have a 'Main Items' (through_references) table that can point to any combination of lookups items, through the 'through_tables' (join table if you will).</p>

<h3>Adding a LEFT OUTER JOIN</h3>
<p>Lookup.includes(:through_tables).includes(:through_references).order('lookups.id')</p>
<p>Corresponding SQL: SELECT * FROM lookups LEFT OUTER JOIN through_tables ON lookups.id = through_tables.lookup_id LEFT OUTER JOIN through_references ON through_references.id = through_tables.through_reference_id</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_through_tables } %>

<p>We now have a table with ALL of the lookup items listed, and ALL of the Main Items joined in, with the Lookup Items duplicated when there are more than one Main Items referencing it.</p>
<p>From the Lookups table perspective, we have Lookup Item 1 being pointed to by both Main Items 1 and 2, Lookup Item 2 only pointed to by Main Item 2 and Lookup Item 3 only pointed to by Main Item 1</p>
<p>So, for example, if we wanted to list all of the lookup items pointed to by Main Item 1, we would then get Lookup Items 1 and 3 as selected.</p>
<p><strong>What we get from Active REcord Query Interface is what I expected.</strong></p>

<h3>Lookup Items for a Main Item</h3>
<p>If we wanted to list all of the lookup items pointed to by Main Item 1, we would then get Lookup Items 1 and 3 as selected.</p>
<p>If we want to have a listing if all the lookup items only for Main Item 1, whether it is selected or not, we will need to have the entire listing of all lookup items, 'left joined' with the Main Items, but only joined for Main Item 1.</p>

<br />

<h3>What not to do - Add a WHERE clause to specify a Main Item ID = 1</h3>
<p>I have heard some people implying that by simply putting a where clause on this statement, you get what you need, which is not correct.  Let's see what happens if we do.</p>
<p><strong>Corresponding SQL:</strong></p>
<p>SELECT * FROM lookups LEFT OUTER JOIN through_tables ON lookups.id = through_tables.lookup_id LEFT OUTER JOIN through_references ON through_references.id = through_tables.through_reference_id WHERE through_references.id = 1 ORDER BY lookups.id</p>

<p><strong>What is returned from PostgreSQL:</strong></p>
<p><code>1;"Lookup Item 1";"1";"2012-06-06 17:14:40.819791";"2012-06-06 17:14:40.819791";1;1;1;"Main Item 1 has Lookup item 1";"2012-06-06 17:17:31.355425";"2012-06-06 17:17:31.355425";1;"Main Item 1";"2012-06-06 17:16:30.004375";"2012-06-06 17:16:30.004375"</code></p>
<p><code>3;"Lookup Item 3";"3";"2012-06-06 17:15:14.700239";"2012-06-06 17:15:14.700239";2;1;3;"Main Item 1 has Lookup item 3";"2012-06-06 17:17:53.169715";"2012-06-06 17:17:53.169715";1;"Main Item 1";"2012-06-06 17:16:30.004375";"2012-06-06 17:16:30.004375"</code></p>
<p><strong>This is what I expected.</strong></p>

<p><strong>Active Record Query Interface using simple where clause</strong></p>
<p>Lookup.includes(:through_tables).includes(:through_references).where("through_references.id = 1").order('lookups.id')</p>

<p><strong>What is returned from Active Record Query Interface:</strong></p>
<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_where } %>

<p><strong>This is NOT what I expected.</strong></p>
<p>The where clause in the Active Record Query Interface does not seem to be working well, as it is passing back (only) one of the Main Item 2 entries, when the where clause specifies otherwise ("through_references.id = 1")</p>
<p>I am suspecting that there is a bug in the Active Record Query Interface in how WHERE clauses are handled in :through situations</p>
<p>But we haven't gotten to my main problem yet</p>


<h3>LEFT JOIN ON with AND clause</h3>
<p>What I really want to do is have a list of all of the lookup items, and if there are matching Main Items, have them appended on to the returned record, and if not, I want nulls.  This is a technique that I have used for over 10 years.</p>
<p>I usually solve this problem by using a special left outer join that not only specifies the fields to join the tables on, but also to do something like a where clause during the join.  This makes sure that the condition is applied to the records being joined, not to the entire set of records that a where clause normally does.</p>
<p><strong>Corresponding SQL:</strong></p>
<code>SELECT * FROM lookups LEFT OUTER JOIN through_tables ON (lookups.id = through_tables.lookup_id AND through_tables.through_reference_id = 1) LEFT OUTER JOIN through_references ON through_references.id = through_tables.through_reference_id ORDER BY lookups.id</code>
<p><strong>Returned records:</strong></p>
<p><code>1;"Lookup Item 1";"1";"2012-06-06 17:14:40.819791";"2012-06-06 17:14:40.819791";1;1;1;"Main Item 1 has Lookup item 1";"2012-06-06 17:17:31.355425";"2012-06-06 17:17:31.355425";1;"Main Item 1";"2012-06-06 17:16:30.004375";"2012-06-06 17:16:30.004375"</code></p>
<p><code>2;"Lookup Item 2";"2";"2012-06-06 17:14:59.584756";"2012-06-06 17:14:59.584756";;;;"";"";"";;"";"";""</code></p>
<p><code>3;"Lookup Item 3";"3";"2012-06-06 17:15:14.700239";"2012-06-06 17:15:14.700239";2;1;3;"Main Item 1 has Lookup item 3";"2012-06-06 17:17:53.169715";"2012-06-06 17:17:53.169715";1;"Main Item 1";"2012-06-06 17:16:30.004375";"2012-06-06 17:16:30.004375"</code></p>
<p><strong>This is what I expected.</strong></p>


<p><strong>Active Record Query Interface using custom left join</strong></p>
<code>Lookup.joins("LEFT OUTER JOIN through_tables ON (lookups.id = through_tables.lookup_id AND through_tables.through_reference_id = 1)" ).includes(:through_references).order('lookups.id')</code>

<p><strong>What is returned from Active Record Query Interface:</strong></p>
<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_left_join_on_through_table } %>

<p><strong>This is NOT what I expected.</strong></p>
<p>What we have here is identical to the simple left join (without the AND clause).  This tells me that the AND clause is being ignored in the Active Record Query Interface.</p>
<p><strong>Is this a BUG, is this the intended effects, or am I missing something ?</strong></p>

<h2>Other Attempts to get it working</h2>
<h3>Left Join when attaching the Main Table</h3>
<p>Lookup.joins("LEFT OUTER JOIN through_tables ON lookups.id = through_tables.lookup_id").joins("LEFT OUTER JOIN through_references ON (through_references.id = through_tables.through_reference_id AND through_references.id = 1)" )</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_left_join_on_reference_table } %>

<br />

<h3>Using find_by_sql, joining the through/join table</h3>
<p>Lookup.find_by_sql("SELECT * FROM lookups LEFT OUTER JOIN through_tables ON (through_tables.lookup_id = lookups.id AND through_tables.through_reference_id = 1) LEFT OUTER JOIN through_references ON through_references.id = through_tables.through_reference_id ORDER BY lookups.value, through_references.id" )</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_find_by_sql_through_tables } %>

<br />

<h3>Using find_by_sql, joining the Main table</h3>
<p>Lookup.find_by_sql("SELECT * FROM lookups LEFT OUTER JOIN through_tables ON through_tables.lookup_id = lookups.id LEFT OUTER JOIN through_references ON (through_references.id = through_tables.through_reference_id AND through_references.id = 1) ORDER BY lookups.value, through_references.id" )</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_find_by_sql_through_references } %>

<br />

<h3>Using includes with hash and Where</h3>
<p>Lookup.includes(:through_tables => :through_references).where("through_tables.through_references_id = 1").order('lookups.id')</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_includes_hash_where } %>

<p><strong>This has brought sanity to the Where clause!!!</strong></p>
<p>So now the where clause is functioning as I would expect a SQL WHERE clause to work!  I notice that records are being read from cache.</p>
<p>Unfortunately, it still does not return all of the lookup items (since there is a where instead of a left join)</p>
<p>Thanks to Greg Sterndale for this improvement.</p>

<br />

<h3>includes references table directly (no includes of through_tables)</h3>
<p>Lookup.includes(:through_references).order('lookups.id')</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_reference } %>

<br />

<h3>includes references table directly with where</h3>
<p>Lookup.includes(:through_references).where("through_tables.through_reference_id = 1").order('lookups.id')</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_reference_where } %>

<br />

<h3>includes through table (only - no through_references table)</h3>
<p>Lookup.includes(:through_tables).order('lookups.id')</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_through } %>

<br />

<h3>includes through table (only - no through_references table) with where</h3>
<p>Lookup.includes(:through_tables).where("through_references.id = 1").order('lookups.id')</p>

<%= render :partial => 'joins_table', :locals => { :references_sql => @lookup_through_where } %>

<br />

<h3>use a Database View to join and use where clause to match id or null</h3>
<p>lookup.find_by_sql("SELECT * FROM view_lookup_items")</p>

<%= render :partial => 'views_table', :locals => { :references_sql => @lookup_through_view } %>

<p><strong>This works partially!  The data returned is correct, but it only works because the reference ID is hard coded in the database view join clause.  Thus we need to bring this into a stored procedure / database function.</strong></p>

<br />

<h3>use a Database View to join and use where clause to match id or null</h3>
<p>Lookup.find_by_sql("SELECT * FROM lookup_through_proc(?)", 1)</p>

<%= render :partial => 'views_table', :locals => { :references_sql => @lookup_through_proc } %>

<p><strong>This works!!  The data returned is correct and the reference ID can be passed to the database view join clause through the stored procedure parameter.  It seems that this is the only way to get the proper joins when they are complicated.  This lets the database do the joins, flattens the data, and removes active record from the process.</strong></p>

<br />

<!-- h3>Using includes with hash on Join</h3>
<p>Lookup.includes(:through_tables => :through_reference => {:id => 1}).order('lookups.id') # invalid syntax</p -->

<!-- %= render :partial => 'joins_table', :locals => { :references_sql => @lookup_for_reference_includes_hash_join } % -->

<br / -->
<p><strong>Conclusion</strong></p>
<p>The conclusion that I have come to is that a join that filters against a parameter do not work in the Active Record Query Interface!!!</p>
<p>So we have two choices, one is to use a Stored Procedure or Function or to process the tables individually, and then merge them together in code (say by using a hash of the records indexed by ID).  Using a Stored procedure simplified the code significantly.  Because all records were passed as one recordset, it flattened out the data, which makes a lot of sense in this situation, and hence significantly simplified the code.  Optionally, we could also put the Stored Procedure or Function behind a model, so we could cache the records in Active Record.</p>
